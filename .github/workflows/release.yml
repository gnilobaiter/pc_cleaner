name: Build and Release PC Cleaner

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'requirements.txt'
      - 'main.py'

jobs:
  check-commit-message:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check_version_and_files.outputs.should_build }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Debug commit message
        run: |
          echo "Commit message: ${{ github.event.head_commit.message }}"
        shell: bash

      - name: Check if commit message contains version and .py files changed
        id: check_version_and_files
        run: |
          # Check if commit message contains version
          VERSION_FOUND=false
          if echo "${{ github.event.head_commit.message }}" | grep -qE 'v[0-9]+\.[0-9]+\.[0-9]+'; then
            VERSION_FOUND=true
            echo "Version found in commit message."
          else
            echo "No version found in commit message."
          fi

          # Check if .py files were changed
          PY_FILES_CHANGED=false
          git diff --name-only HEAD^ HEAD | grep -qE '\.py$'
          if [ $? -eq 0 ]; then
            PY_FILES_CHANGED=true
            echo "Changed .py files found:"
            git diff --name-only HEAD^ HEAD | grep -E '\.py$'
          else
            echo "No .py files changed."
          fi

          # Set should_build based on both conditions
          if [ "$VERSION_FOUND" = "true" ] && [ "$PY_FILES_CHANGED" = "true" ]; then
            echo "Both conditions met, proceeding with build."
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "Conditions not met, skipping build."
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

  build-and-release:
    needs: check-commit-message
    if: needs.check-commit-message.outputs.should_build == 'true'
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Create venv
        run: python -m venv .venv
        shell: cmd

      - name: Activate venv and install deps
        run: |
          .venv\Scripts\activate
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
        shell: powershell

      - name: Extract VERSION from config.py
        id: get_version
        run: |
          set VERSION=
          for /f "tokens=2 delims== " %%a in ('findstr /R "^VERSION[ ]*=" src\config.py') do set "VERSION=%%a"
          if not defined VERSION (
            echo Failed to extract VERSION from src/config.py
            exit /b 1
          )
          set "VERSION=%VERSION: =%"
          set "VERSION=%VERSION:\"=%"
          echo Extracted VERSION: %VERSION%
          echo VERSION=%VERSION%>>%GITHUB_ENV%
        shell: cmd

      - name: Debug VERSION
        run: |
          echo VERSION from env: ${{ env.VERSION }}
        shell: bash

      - name: Check if tag exists and create if not
        run: |
          git fetch --tags
          if not exist "refs/tags/${{ env.VERSION }}" (
            echo Creating tag ${{ env.VERSION }}...
            git tag ${{ env.VERSION }}
            git push origin ${{ env.VERSION }}
          ) else (
            echo Tag ${{ env.VERSION }} already exists, skipping...
          )
        shell: cmd

      - name: Build EXE
        run: |
          .venv\Scripts\activate
          pyinstaller --name PC_CLEANER ^
            --noconfirm ^
            --clean ^
            --onefile ^
            --hidden-import colorama ^
            main.py
        shell: powershell

      - name: Move EXE
        run: |
          mkdir releases
          move dist\PC_CLEANER.exe releases\PC_CLEANER_${{ env.VERSION }}.exe
        shell: cmd

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: PC Cleaner ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: releases/PC_CLEANER_${{ env.VERSION }}.exe
          asset_name: PC_CLEANER_${{ env.VERSION }}.exe
          asset_content_type: application/octet-stream
